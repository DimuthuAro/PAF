import React, { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { eventService } from '../services/api';
import { useAuth } from '../context/AuthContext';
import { FiEdit, FiTrash2, FiSearch, FiFilePlus, FiDownload } from 'react-icons/fi';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

const Events = () => {
    const [events, setEvents] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [loading, setLoading] = useState(true);
    const [searching, setSearching] = useState(false);
    const [error, setError] = useState(null);
    const { currentUser } = useAuth();
    const navigate = useNavigate();
    const [showConfirmDelete, setShowConfirmDelete] = useState(false);
    const [eventToDelete, setEventToDelete] = useState(null);
    const [searchTimeout, setSearchTimeout] = useState(null);
    
    // Pagination
    const [currentPage, setCurrentPage] = useState(1);
    const [eventsPerPage, setEventsPerPage] = useState(() => {
        // Try to load from localStorage or default to 6
        return parseInt(localStorage.getItem('eventsPerPage') || '6');
    });

    // Change events per page and store in localStorage
    const handleEventsPerPageChange = (e) => {
        const value = parseInt(e.target.value);
        setEventsPerPage(value);
        localStorage.setItem('eventsPerPage', value.toString());
        setCurrentPage(1); // Reset to first page when changing items per page
    };

    useEffect(() => {
        const fetchEvents = async () => {
            setLoading(true);
            try {
                const response = await eventService.getAllEvents();
                setEvents(response.data);
                setLoading(false);
            } catch (error) {
                console.error('Error fetching events:', error);
                setError('Failed to load events. Please try again later.');
                setLoading(false);
            }
        };
        fetchEvents();
    }, []);
    
    const handleSearch = async (term) => {
        if (searchTimeout) {
            clearTimeout(searchTimeout);
        }
        
        setSearchTerm(term);
        
        if (!term.trim()) {
            // If search is cleared, get all events
            try {
                const response = await eventService.getAllEvents();
                setEvents(response.data);
            } catch (error) {
                console.error('Error fetching events:', error);
            }
            return;
        }
        
        // Debounce search requests
        setSearchTimeout(
            setTimeout(async () => {
                setSearching(true);
                try {
                    const response = await eventService.searchEvents(term);
                    setEvents(response.data);
                } catch (error) {
                    console.error('Error searching events:', error);
                } finally {
                    setSearching(false);
                }
            }, 500)
        );
    };
    
    // Filtered events are now handled by the backend search API, but we keep this for client-side fallback
    const filteredEvents = events.filter((event) =>
        (event.title && event.title.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (event.description && event.description.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (event.location && event.location.toLowerCase().includes(searchTerm.toLowerCase()))
    );
    
    // Pagination logic
    const indexOfLastEvent = currentPage * eventsPerPage;
    const indexOfFirstEvent = indexOfLastEvent - eventsPerPage;
    const currentEvents = filteredEvents.slice(indexOfFirstEvent, indexOfLastEvent);
    const totalPages = Math.ceil(filteredEvents.length / eventsPerPage);
    
    // Change page
    const paginate = (pageNumber) => setCurrentPage(pageNumber);
    
    // Go to previous page
    const previousPage = () => {
        if (currentPage > 1) {
            setCurrentPage(currentPage - 1);
        }
    };
    
    // Go to next page
    const nextPage = () => {
        if (currentPage < totalPages) {
            setCurrentPage(currentPage + 1);
        }
    };
    
    const handleEditClick = (eventId, e) => {
        e.preventDefault();
        e.stopPropagation();
        navigate(`/edit-event/${eventId}`);
    };
    
    const handleDeleteClick = (eventId, e) => {
        e.preventDefault();
        e.stopPropagation();
        setEventToDelete(eventId);
        setShowConfirmDelete(true);
    };
    
    const confirmDelete = async () => {
        if (!eventToDelete) return;
        
        try {
            await eventService.deleteEvent(eventToDelete);
            // Remove the deleted event from state
            setEvents(events.filter(event => event.id !== eventToDelete));
            setShowConfirmDelete(false);
            setEventToDelete(null);
        } catch (error) {
            console.error('Error deleting event:', error);
            alert('Failed to delete event. Please try again.');
        }
    };
    
    const generatePDF = (events) => {
        const doc = new jsPDF();
        const tableColumn = ["Title", "Date", "Location", "Description"];
        const tableRows = [];

        events.forEach(event => {
            const eventData = [
                event.title || '',
                formatDate(event.date) || '',
                event.location || '',
                event.description ? (event.description.substring(0, 60) + (event.description.length > 60 ? "..." : "")) : ''
            ];
            tableRows.push(eventData);
        });

        // Add header with logo/title
        doc.setFillColor(63, 81, 181); // Indigo color
        doc.rect(0, 0, doc.internal.pageSize.getWidth(), 40, 'F');
        doc.setTextColor(255, 255, 255);
        doc.setFontSize(20);
        doc.text("Events List", 14, 20);
        doc.setFontSize(10);
        doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 30);
        
        doc.autoTable({
            head: [tableColumn],
            body: tableRows,
            startY: 45,
            headStyles: {
                fillColor: [100, 116, 139], // Slate-500
                textColor: [255, 255, 255]
            },
            styles: {
                fontSize: 8,
                cellPadding: 3,
                overflow: 'linebreak',
            },
            columnStyles: {
                0: { cellWidth: 30 },
                1: { cellWidth: 30 },
                2: { cellWidth: 30 },
                3: { cellWidth: 'auto' },
            },
            alternateRowStyles: {
                fillColor: [243, 244, 246] // Gray-100
            },
            margin: { top: 45 }
        });
        
        // Add footer with page numbers
        const pageCount = doc.internal.getNumberOfPages();
        for(let i = 1; i <= pageCount; i++) {
            doc.setPage(i);
            doc.setTextColor(100);
            doc.setFontSize(8);
            doc.text('Page ' + i + ' of ' + pageCount, doc.internal.pageSize.getWidth() - 25, doc.internal.pageSize.getHeight() - 10);
        }
        
        doc.save("events-list.pdf");
    };

    // Format date for display
    const formatDate = (dateString) => {
        if (!dateString) return '';
        const date = new Date(dateString);
        
        // Check if date is valid
        if (isNaN(date.getTime())) return dateString;
        
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    };

    return (
        <div className="container mx-auto px-4 py-8">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-3xl font-bold">Upcoming Events</h1>
                <Link 
                    to="/events/create"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-300 flex items-center">
                    <FiFilePlus className="mr-2" /> Create Event
                </Link>
            </div>
            
            <div className="mb-6 relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <FiSearch className="h-5 w-5 text-gray-400" />
                </div>
                <input
                    type="text"
                    placeholder="Search events by title, description or location..."
                    value={searchTerm}
                    onChange={(e) => handleSearch(e.target.value)}
                    className="w-full pl-10 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
            </div>
            
            {loading || searching ? (
                <div className="flex justify-center py-12">
                    <div className="w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
                    {searching && <p className="ml-4 text-gray-600 animate-pulse">Searching...</p>}
                </div>
            ) : error ? (
                <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded">
                    <p className="text-red-700">{error}</p>
                </div>
            ) : (
                <>
                    {/* Display showing X-Y of Z events */}
                    <div className="mb-4 flex items-center justify-between">
                        <p className="text-sm text-gray-600">
                            {filteredEvents.length > 0 ? (
                                `Showing ${indexOfFirstEvent + 1}-${Math.min(indexOfLastEvent, filteredEvents.length)} of ${filteredEvents.length} events`
                            ) : (
                                "No events found"
                            )}
                        </p>
                        
                        <div className="flex items-center space-x-2">
                            <label htmlFor="eventsPerPage" className="text-sm text-gray-600">
                                Show:
                            </label>
                            <select
                                id="eventsPerPage"
                                value={eventsPerPage}
                                onChange={handleEventsPerPageChange}
                                className="border border-gray-300 rounded-md p-1 text-sm"
                            >
                                <option value="3">3</option>
                                <option value="6">6</option>
                                <option value="9">9</option>
                                <option value="12">12</option>
                            </select>
                        </div>
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {currentEvents.length > 0 ? (
                            currentEvents.map((event) => (
                                <Link to={`/events/${event.id}`} key={event.id}
                                    className="block bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                                    <div className="p-6">
                                        {event.image && (
                                            <div className="h-48 bg-gray-200 rounded-lg mb-4 overflow-hidden">
                                                <img src={event.image} alt={event.title} className="w-full h-full object-cover" />
                                            </div>
                                        )}
                                        <h2 className="text-xl font-semibold text-gray-900 mb-2">{event.title}</h2>
                                        <p className="text-gray-600 line-clamp-2 mb-3">{event.description}</p>
                                        <div className="flex items-center justify-between text-sm text-gray-500">
                                            <div className="flex items-center">
                                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                </svg>
                                                <span>{formatDate(event.date)}</span>
                                            </div>
                                            {event.location && (
                                                <div className="flex items-center">
                                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                                    </svg>
                                                    <span>{event.location}</span>
                                                </div>
                                            )}
                                        </div>
                                        
                                        {/* Event actions - edit and delete */}
                                        {currentUser && currentUser.user && event.userId === currentUser.user.id && (
                                            <div className="mt-4 flex space-x-3 justify-end">
                                                <button
                                                    onClick={(e) => handleEditClick(event.id, e)}
                                                    className="flex items-center px-3 py-1 text-sm bg-indigo-100 text-indigo-700 rounded hover:bg-indigo-200 transition-colors"
                                                >
                                                    <FiEdit className="mr-1" /> Edit
                                                </button>
                                                <button
                                                    onClick={(e) => handleDeleteClick(event.id, e)}
                                                    className="flex items-center px-3 py-1 text-sm bg-red-100 text-red-700 rounded hover:bg-red-200 transition-colors"
                                                >
                                                    <FiTrash2 className="mr-1" /> Delete
                                                </button>
                                            </div>
                                        )}
                                    </div>
                                </Link>
                            ))
                        ) : (
                            <div className="col-span-full text-center py-12">
                                <p className="text-gray-500 text-lg">No events found. Try adjusting your search.</p>
                            </div>
                        )}
                    </div>
                    
                    {/* Pagination Controls */}
                    {filteredEvents.length > 0 && (
                        <div className="mt-8 flex justify-center">
                            <nav className="inline-flex rounded-md shadow">
                                <button
                                    onClick={previousPage}
                                    disabled={currentPage === 1}
                                    className={`px-3 py-1 rounded-l-md border ${
                                        currentPage === 1
                                            ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                                            : 'bg-white text-gray-700 hover:bg-blue-50'
                                    }`}
                                >
                                    Previous
                                </button>
                                
                                {/* Page Number Buttons */}
                                <div className="hidden sm:flex">
                                    {[...Array(totalPages).keys()].map((number) => (
                                        <button
                                            key={number + 1}
                                            onClick={() => paginate(number + 1)}
                                            className={`px-3 py-1 border-t border-b ${
                                                currentPage === number + 1
                                                    ? 'bg-blue-600 text-white'
                                                    : 'bg-white text-gray-700 hover:bg-blue-50'
                                            }`}
                                        >
                                            {number + 1}
                                        </button>
                                    ))}
                                </div>
                                
                                {/* Mobile Pagination Info */}
                                <div className="flex sm:hidden items-center px-3 py-1 border-t border-b bg-white">
                                    <span className="text-sm text-gray-700">
                                        Page {currentPage} of {totalPages}
                                    </span>
                                </div>
                                
                                <button
                                    onClick={nextPage}
                                    disabled={currentPage === totalPages || totalPages === 0}
                                    className={`px-3 py-1 rounded-r-md border ${
                                        currentPage === totalPages || totalPages === 0
                                            ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                                            : 'bg-white text-gray-700 hover:bg-blue-50'
                                    }`}
                                >
                                    Next
                                </button>
                            </nav>
                        </div>
                    )}
                </>
            )}
            
            {/* Delete Confirmation Modal */}
            {showConfirmDelete && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-8 max-w-md w-full">
                        <h2 className="text-xl font-semibold mb-4">Delete Event</h2>
                        <p className="text-gray-700 mb-6">Are you sure you want to delete this event? This action cannot be undone.</p>
                        <div className="flex justify-end">
                            <button
                                onClick={() => setShowConfirmDelete(false)}
                                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-300 mr-2"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={confirmDelete}
                                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition duration-300"
                            >
                                Delete Event
                            </button>
                        </div>
                    </div>
                </div>
            )}
            
            {/* PDF Export Button */}
            <div className="fixed bottom-8 right-8">
                <button 
                    onClick={() => generatePDF(filteredEvents)}
                    className="px-6 py-3 bg-purple-600 text-white rounded-full shadow-lg hover:bg-purple-700 transition duration-300 flex items-center"
                    title="Export all filtered events to PDF"
                >
                    <FiDownload className="mr-2" />
                    Export to PDF
                </button>
            </div>
        </div>
    );
};

export default Events;
